1....document.location和window.location是同一个对象,代表当前页面的相关信息对象,可以读取和赋值

2....window.location.href 属性代表当前页面的完整url

3..... location的其他属性{
	....host 服务器名称和端口号
	....hostname 服务器名称
	....pathname 地址中的路径部分
	....port 端口号
	....search 查询字符串,指?后面的字符串

}

4....window.open(){
	.....window.open(地址,打开方式);
		.....地址的取值{
			完整的url
			本地页面
			"about:blank",表示空白页面
		}
		.....打开方式取值{
			"_blank",空白页面打开,默认值
			"_self",当前窗口打开
		}
}

5....窗口位置{
	(下面代码指的是整个浏览器包含浏览器工具栏，滚动条)
	....window.screenLeft/window.screenTop 窗口相对于屏幕左边/顶部的距离(IE Chrome Safari Opera)
	....window.screenX/window.screenY  窗口相对于屏幕左边/顶部的距离(FireFox)
}

6....窗口大小{
	
	....浏览器视口宽高(不包含浏览器的边框,边框指的是浏览器工具栏，如果有滚动条则包括){
		....window.innerHeight指的是视口的高，不包含搜索栏
		....window.innerWidth指的是视口的宽，不包含浏览器边框

		什么是视口？视口在这里是指body

		(
			下面这句话不知道对不对，当html什么都没有的时候这两值是一样的，其他情况没测过

			注意：'兼容所有浏览器获取当前屏幕的宽度'——>{
				document.body.clientWidth || document.documentElement.clientWidth
				他的值和window.innerWidth一样
			}
		)

	}
	....浏览器窗口整个自身的宽高(包含浏览器边框){
		....window.outerWidth
		....window.outerHeight
		整个浏览器的宽高，会随着浏览器的缩小放大改变
	}

}


7....offset相关值{
	....offsetLeft,元素的左外边框和参考父元素左内边框的距离
	....offsetTop,元素的上外边框和参考父元素上内边框的距离
	....offsetWidth,元素的宽(水平方向上边框+水平方向上内边距+内容宽+垂直滚动条)
	....offsetHeight,元素的高(垂直方向上边框+垂直方向上内边距+内容高+水平滚动条)
}


offset相关值和client相关值都是只读属性
offset相关值和client相关值每次访问都会从新计算
offset相关值和client相关值都是获取计算后的值


8....client相关值{
	....clientWidth,元素的客户区宽(水平方向上内边距+内容宽),不包括滚动条
	....clientHeight,元素的客户区高(垂直方向上内边距+内容高),不包括滚动条
}

9....确定浏览器视口宽高(不包括滚动条){
	....标准模式用document.documentElement.clientWidth/clientHeight
	....混杂模式用 document.body.clientWidth/clientHeight


		var w =0,h=0;
....if(document.compatMode == 'CSS1Compat'){
		w = document.documentElement.clientWidth;
		h = document.documentElement.clientHeight;
	}else{
		w = document.body.clientWidth;
	} 

....if(document.compatMode == "CSS1Compat") {

			    console.log("标准模式");

			}else {

		    console.log("混杂模式");

			}


10....scroll相关值{
	....scrollLeft,读写属性,表示隐藏在内容区域左侧的宽度,一般指水平滚动距离
	....scrollTop,读写属性,表示隐藏在内容区域上侧的高度,一般指垂直滚动距离
	....scrollWidth,只读属性,表示元素内容的宽度,包括由于滚动而未显示在屏幕中内容
	....scrollHeight,只读属性,表示元素内容的高度,包括由于滚动而未显示在屏幕中内容
}

11....确定页面的水平／垂直滚动距离{
	....scrollLeft/scrollTop 通常用来确定页面的水平／垂直滚动距离,但需要注意兼容问题,其中scrollTop是最常用的一个属性

	....标准模式用document.documentElement.scrollLeft/scrollTop
	....混杂模式用 document.body.scrollLeft/scrollTop
    ....IE9以上和高级浏览器可以用window.pageXOffset/window.pageYOffset


    

    var l = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft;		
	var t = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
}


12.... calc()的使用(目前不清楚，不过感觉很方便，是需要好好看看的)

13....关于vw 、vh、vmin 、vmax的兼容性
	....vmin：当前 vw 和 vh 中较小的一个值
	....vmax：当前 vw 和 vh 中较大的一个值
	2、vw、vh与%百分比的区别
	（1）% 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。
	（2）vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的，所以这是挺不错的优势。
	3、vmin、vmax用处
	做移动页面开发时，如果使用 vw、wh 设置字体大小（比如 5vw），在竖屏和横屏状态下显示的字体大小是不一样的。
	由于 vmin 和 vmax 是当前较小的 vw 和 vh 和当前较大的 vw 和 vh。这里就可以用到 vmin 和 vmax。使得文字大小在横竖屏下保持一致。

	（1）桌面 PC
	Chrome：自 26 版起就完美支持（2013年2月）
	Firefox：自 19 版起就完美支持（2013年1月）
	Safari：自 6.1 版起就完美支持（2013年10月）
	Opera：自 15 版起就完美支持（2013年7月）
	IE：自 IE10 起（包括 Edge）到现在还只是部分支持（不支持 vmax，同时 vm 代替 vmin）

	（2）移动设备
	Android：自 4.4 版起就完美支持（2013年12月）
	iOS：自 iOS8 版起就完美支持（2014年9月）
	原文链接：https://blog.csdn.net/romantic_love/article/details/80868909

14....移动端网站设置根元素的js代码

;(function(win,doc){
    //获取根元素
    var root = doc.getElementsByTagName('html')[0];

    function refresh(){
        // console.log('aa')
        //获取视口的宽度
        // var width = doc.body.clientWidth || doc.documentElement.clientWidth
        var width =  doc.documentElement.clientWidth
        var fontSize = width / 10 + 'px'

        root.style.fontSize = fontSize        
    }
    //页面加载刷新
    //win.addEventListener('DOMContentLoaded',refresh,false)
    refresh();
    //页面大小发生变化
    win.addEventListener('resize',refresh,false);

})(window,document)

15....exports和module.exports的区别？



16...--save-dev是本地安装， 依赖会加在package.json的devDependencies中,一般是辅助开发的依赖,不会打包上线的 
  ...--save:把包的版本信息添加到package.json中dependencies 中(默认),一般是需要最终需要打包到业务代码中的依赖

17....图片从网上拉下来就是它原来做网页时的用的图片大小

18....webpack.config.js出口中尽量用绝对路径，如：path: path.resolve(__dirname, 'dist')
在出口filename: '[name]-[chunkhash]-bundle.js',意思是每次打包name后面的chunkhash值不同。
        filename: '[name]-[hash]-bundle.js',hash后面的数字相同。
  webpack没有打包是文件是存放在磁盘中的，经过打包将文件放到内存中，这样可以提高打包速度


18......{
	   plugins: [// 配置插件的节点
		   new htmlWebpackPlugin({ // 创建一个 在内存中 生成 HTML  页面的插件
		      template: path.join(__dirname, './src/index.html'), // 指定 模板页面，将来会根据指定的页面路径，去生成内存中的 页面
		      filename: 'index.html' // 指定生成的页面的名称
		    })
	   ]
	   // 这个插件的两个作用：
	   //  1. 自动在内存中根据指定页面生成一个内存的页面
	   //  2. 自动，把打包好的 bundle.js 追加到页面中去（不用再在页面手动引用）
   }
   { test: /\.(jpg|png|gif|bmp|jpeg)$/, use: 'url-loader?limit=7631&name=[hash:8]-[name].[ext]' },name属性可以不要，如果想要name属性，最好按照现在的写法复制，hash值不能超过32，要name的作用是打包过后的图片和打包之前的名称一样。
18....npm 相关问题
	npm install module_name -S    即    npm install module_name --save    写入dependencies

	npm install module_name -D    即    npm install module_name --save-dev 写入devDependencies

	npm install module_name -g 全局安装(命令行使用)

	npm install module_name 本地安装(将安装包放在 ./node_modules 下)




19....stringObject.substring(start,stop)：start 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。
stop  可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。






alert(document.body.clientWidth);        //网页可见区域宽(body)

alert(document.body.clientHeight);       //网页可见区域高(body)

alert(document.body.offsetWidth);       //网页可见区域宽(body)，包括border、margin等

alert(document.body.offsetHeight);      //网页可见区域宽(body)，包括border、margin等

alert(document.body.scrollWidth);        //网页正文全文宽，包括有滚动条时的未见区域

alert(document.body.scrollHeight);       //网页正文全文高，包括有滚动条时的未见区域

alert(document.body.scrollTop);           //网页被卷去的Top(滚动条)

alert(document.body.scrollLeft);           //网页被卷去的Left(滚动条)

alert(window.screenTop);                     //浏览器距离Top

alert(window.screenLeft);                     //浏览器距离Left

alert(window.screen.height);                //屏幕分辨率的高

alert(window.screen.width);                 //屏幕分辨率的宽

alert(window.screen.availHeight);          //屏幕可用工作区的高

alert(window.screen.availWidth);           //屏幕可用工作区的宽



vue之类的框架不支持手动操作dom，什么是手动操作dom？答：如jquery中$('$element')获取元素进行操作，这就是手动操作dom；所以在#app的data里的数据可以直接用双花括号包裹放入html中，相当于innerHtml（data里的数据）。

为什么vue要var vm=new Vue({
	因为引入vue的js框架之后，会在window上多一个vue的构造函数。
})

vue实例所控制的元素区（HTML代码）就是MVVM中的v；
我们new出来的VM对象就是MVVM中的VM调度者；
在new出来的对象里data就是MVVM中的m，专门用来保存页面中的数据

在vue页面中，可以用id和class，用id就用#id，用class用.class

v-cloak属性可以解决闪烁问题（当网速慢的时候会显示我们html代码中的数据名称如{{msg}}），需要设置这个属性：在style标签中【v-cloak】{dispaly：none}就解决上述问题


{{msg}}插值表达式，v-text属性，这两个都可以将data中的数据传递到页面中，这两个区别：
1：默认v-text属性没有闪烁问题；
2：{{msg}}前后加的文本可以在页面中显示，如：++++{{msg}}---，加减号可以在前台页面上显示；但是v-text，只会显示v-text的值，替换html中原有的值，如：<p v-text='msg'>===----</p>等号和减号不会显示在页面中，只会显示data里的msg；

v-html：如<p v-html='msg2'>===----</p>，它会把msg2当做html来解析，同样会替换掉p标签里原先所以的文本。

v-bind是绑定属性，缩写：，如：属性title=‘data里的msg属性’这样写是获取不到的，需要这样写v-bind：title=‘msg'，v-text和v-html是个例外。

v-on是绑定事件的，缩写@，@click=“change”，change是在VM实例中methods中定义的函数，methods是一个对象，change是函数名，不需要在methods中加function，可以直接写change（）{}就行。

在VM实例中，想要获取data和methods中的数据和方法需要通过this.属性名和this.函数名

VM实例会监听VM data里面所有数据的变化，只要data中数据发生改变，就会自动把最新数据同步到页面上去（好处：程序员只需要关心数据，不需要关心如何重新渲染dom页面。

箭头函数内部this和外部this始终保持一至。